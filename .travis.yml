# Based on https://github.com/Microsoft/GSL/blob/master/.travis.yml

language: cpp
sudo: false
notifications:
  email: false

# Use Linux unless specified otherwise
os: linux
dist: trusty

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps
    - /home/travis/.conan

matrix:
  include:

    ##########################################################################
    # Clang on OSX
    # Travis seems to take longer to start OSX instances,
    # so leave this first for the overall build to be faster
    ##########################################################################

    # XCode 9.1
    # TODO

    # - env: COMPILER=clang++ BUILD_TYPE=Debug
    #   os: osx
    #   osx_image: xcode9.1
    #   compiler: clang

    # - env: COMPILER=clang++ BUILD_TYPE=Release
    #   os: osx
    #   osx_image: xcode9.1
    #   compiler: clang

    ##########################################################################
    # Clang on Linux
    ##########################################################################

    # Clang 7.0
    - env: COMPILER=clang++-7 BUILD_TYPE=Debug CONAN_COMPILER=clang CONAN_COMPILER_VERSION=7.0 CONAN_STDLIB=libc++
      addons: &clang70
        apt:
          packages:
            - clang-7
            - g++-7
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-7

    - env: COMPILER=clang++-7 BUILD_TYPE=Release CONAN_COMPILER=clang CONAN_COMPILER_VERSION=7.0 CONAN_STDLIB=libc++
      addons: *clang70

    ##########################################################################
    # GCC on Linux
    ##########################################################################

    # GCC 7
    - env: COMPILER=g++-7 BUILD_TYPE=Debug CONAN_COMPILER=gcc CONAN_COMPILER_VERSION=7 CONAN_STDLIB=libstdc++
      addons: &gcc7
        apt:
          packages: g++-7
          sources:
            - ubuntu-toolchain-r-test

    - env: COMPILER=g++-7 BUILD_TYPE=Release CONAN_COMPILER=gcc CONAN_COMPILER_VERSION=7 CONAN_STDLIB=libstdc++
      addons: *gcc7

install:
  # Set the ${CXX} variable properly
  - export CXX=${COMPILER}
  - ${CXX} --version

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"

  # Travis machines have 2 cores
  - JOBS=2

  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - CMAKE_VERSION=3.13.4
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  ############################################################################
  # [linux]: Install the right version of libc++
  ############################################################################
  - |
    LLVM_INSTALL=${DEPS_DIR}/llvm/install
    # if in linux and compiler clang and llvm not installed
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" && -n "$(ls -A ${LLVM_INSTALL})" ]]; then
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"

      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)

      export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
      export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
    fi

  - echo "$CXXFLAGS"
  - export CMAKE_VERBOSE_MAKEFILE=1

before_script:
  # have CMake to generate build files
  - cd "${TRAVIS_BUILD_DIR}"
  - sudo pip install conan
  # install screencapturelite deps
  - sudo apt-get install libxtst-dev libxinerama-dev libx11-dev libxfixes-dev libxrandr-dev libxcursor-dev
  # setup conan remotes
  - conan remote add --force d34dpkgs https://api.bintray.com/conan/0xd34d10cc/d34dpkgs
  - conan remote add --force bincrafters https://api.bintray.com/conan/bincrafters/public-conan
  # build dependencies
  - mkdir build && cd build
  - conan install --build=missing -s build_type=$BUILD_TYPE -s compiler=$CONAN_COMPILER -s compiler.version=$CONAN_COMPILER_VERSION -s compiler.libcxx=$CONAN_STDLIB .. 
  - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

script:
  # build and run tests
  - cmake --build . -- -j${JOBS}
  # TODO
  # - ctest --output-on-failure -j${JOBS}
